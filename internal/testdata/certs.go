package testdata

import (
	"encoding/base64"
	"github.com/golang/glog"
	"time"
)

// Certs is a map of base64 encoded test data.
// Also see CertsNotAfterTimes
var Certs = map[string][]byte {
	"rootPEM": []byte(`-----BEGIN CERTIFICATE-----
MIIEBDCCAuygAwIBAgIDAjppMA0GCSqGSIb3DQEBBQUAMEIxCzAJBgNVBAYTAlVT
MRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMRswGQYDVQQDExJHZW9UcnVzdCBHbG9i
YWwgQ0EwHhcNMTMwNDA1MTUxNTU1WhcNMTUwNDA0MTUxNTU1WjBJMQswCQYDVQQG
EwJVUzETMBEGA1UEChMKR29vZ2xlIEluYzElMCMGA1UEAxMcR29vZ2xlIEludGVy
bmV0IEF1dGhvcml0eSBHMjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB
AJwqBHdc2FCROgajguDYUEi8iT/xGXAaiEZ+4I/F8YnOIe5a/mENtzJEiaB0C1NP
VaTOgmKV7utZX8bhBYASxF6UP7xbSDj0U/ck5vuR6RXEz/RTDfRK/J9U3n2+oGtv
h8DQUB8oMANA2ghzUWx//zo8pzcGjr1LEQTrfSTe5vn8MXH7lNVg8y5Kr0LSy+rE
ahqyzFPdFUuLH8gZYR/Nnag+YyuENWllhMgZxUYi+FOVvuOAShDGKuy6lyARxzmZ
EASg8GF6lSWMTlJ14rbtCMoU/M4iarNOz0YDl5cDfsCx3nuvRTPPuj5xt970JSXC
DTWJnZ37DhF5iR43xa+OcmkCAwEAAaOB+zCB+DAfBgNVHSMEGDAWgBTAephojYn7
qwVkDBF9qn1luMrMTjAdBgNVHQ4EFgQUSt0GFhu89mi1dvWBtrtiGrpagS8wEgYD
VR0TAQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAQYwOgYDVR0fBDMwMTAvoC2g
K4YpaHR0cDovL2NybC5nZW90cnVzdC5jb20vY3Jscy9ndGdsb2JhbC5jcmwwPQYI
KwYBBQUHAQEEMTAvMC0GCCsGAQUFBzABhiFodHRwOi8vZ3RnbG9iYWwtb2NzcC5n
ZW90cnVzdC5jb20wFwYDVR0gBBAwDjAMBgorBgEEAdZ5AgUBMA0GCSqGSIb3DQEB
BQUAA4IBAQA21waAESetKhSbOHezI6B1WLuxfoNCunLaHtiONgaX4PCVOzf9G0JY
/iLIa704XtE7JW4S615ndkZAkNoUyHgN7ZVm2o6Gb4ChulYylYbc3GrKBIxbf/a/
zG+FA1jDaFETzf3I93k9mTXwVqO94FntT0QJo544evZG0R0SnU++0ED8Vf4GXjza
HFa9llF7b1cq26KqltyMdMKVvvBulRP/F/A8rLIQjcxz++iPAsbw+zOzlTvjwsto
WHPbqCRiOwY1nQ2pM714A5AuTHhdUDqB1O6gyHA43LL5Z/qHQF1hwFGPa4NrzQU6
yuGnBXj8ytqU0CwIPX4WecigUCAkVDNx
-----END CERTIFICATE-----`),
	"certPEM": []byte(`-----BEGIN CERTIFICATE-----
MIIDujCCAqKgAwIBAgIIE31FZVaPXTUwDQYJKoZIhvcNAQEFBQAwSTELMAkGA1UE
BhMCVVMxEzARBgNVBAoTCkdvb2dsZSBJbmMxJTAjBgNVBAMTHEdvb2dsZSBJbnRl
cm5ldCBBdXRob3JpdHkgRzIwHhcNMTQwMTI5MTMyNzQzWhcNMTQwNTI5MDAwMDAw
WjBpMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwN
TW91bnRhaW4gVmlldzETMBEGA1UECgwKR29vZ2xlIEluYzEYMBYGA1UEAwwPbWFp
bC5nb29nbGUuY29tMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEfRrObuSW5T7q
5CnSEqefEmtH4CCv6+5EckuriNr1CjfVvqzwfAhopXkLrq45EQm8vkmf7W96XJhC
7ZM0dYi1/qOCAU8wggFLMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAa
BgNVHREEEzARgg9tYWlsLmdvb2dsZS5jb20wCwYDVR0PBAQDAgeAMGgGCCsGAQUF
BwEBBFwwWjArBggrBgEFBQcwAoYfaHR0cDovL3BraS5nb29nbGUuY29tL0dJQUcy
LmNydDArBggrBgEFBQcwAYYfaHR0cDovL2NsaWVudHMxLmdvb2dsZS5jb20vb2Nz
cDAdBgNVHQ4EFgQUiJxtimAuTfwb+aUtBn5UYKreKvMwDAYDVR0TAQH/BAIwADAf
BgNVHSMEGDAWgBRK3QYWG7z2aLV29YG2u2IaulqBLzAXBgNVHSAEEDAOMAwGCisG
AQQB1nkCBQEwMAYDVR0fBCkwJzAloCOgIYYfaHR0cDovL3BraS5nb29nbGUuY29t
L0dJQUcyLmNybDANBgkqhkiG9w0BAQUFAAOCAQEAH6RYHxHdcGpMpFE3oxDoFnP+
gtuBCHan2yE2GRbJ2Cw8Lw0MmuKqHlf9RSeYfd3BXeKkj1qO6TVKwCh+0HdZk283
TZZyzmEOyclm3UGFYe82P/iDFt+CeQ3NpmBg+GoaVCuWAARJN/KfglbLyyYygcQq
0SgeDh8dRKUiaW3HQSoYvTvdTuqzwK4CXsr3b5/dAOY8uMuG/IAR3FgwTbZ1dtoW
RvOTa8hYiU6A475WuZKyEHcwnGYe57u2I2KbMgcKjPniocj4QzgYsVAVKW3IwaOh
yE+vPxsiUkvQHdO2fojCkY8jg70jxM+gu59tPDNbw3Uh/2Ij310FgTHsnGQMyA==
-----END CERTIFICATE-----`),
	"pubPEM": []byte(`-----BEGIN PUBLIC KEY-----
MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAlRuRnThUjU8/prwYxbty
WPT9pURI3lbsKMiB6Fn/VHOKE13p4D8xgOCADpdRagdT6n4etr9atzDKUSvpMtR3
CP5noNc97WiNCggBjVWhs7szEe8ugyqF23XwpHQ6uV1LKH50m92MbOWfCtjU9p/x
qhNpQQ1AZhqNy5Gevap5k8XzRmjSldNAFZMY7Yv3Gi+nyCwGwpVtBUwhuLzgNFK/
yDtw2WcWmUU7NuC8Q6MWvPebxVtCfVp/iQU6q60yyt6aGOBkhAX0LpKAEhKidixY
nP9PNVBvxgu3XZ4P36gZV6+ummKdBVnc3NqwBLu5+CcdRdusmHPHd5pHf4/38Z3/
6qU2a/fPvWzceVTEgZ47QjFMTCTmCwNt29cvi7zZeQzjtwQgn4ipN9NibRH/Ax/q
TbIzHfrJ1xa2RteWSdFjwtxi9C20HUkjXSeI4YlzQMH0fPX6KCE7aVePTOnB69I/
a9/q96DiXZajwlpq3wFctrs1oXqBp5DVrCIj8hU2wNgB7LtQ1mCtsYz//heai0K9
PhE4X6hiE0YmeAZjR0uHl8M/5aW9xCoJ72+12kKpWAa0SFRWLy6FejNYCYpkupVJ
yecLk/4L1W0l6jQQZnWErXZYe0PNFcmwGXy1Rep83kfBRNKRy5tvocalLlwXLdUk
AIU+2GKjyT3iMuzZxxFxPFMCAwEAAQ==
-----END PUBLIC KEY-----`),

// kubectl create secret tls xyz --cert=file.cert --key=file.key
"tls.crt": Mustb64Decode("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMrVENDQWVHZ0F3SUJBZ0lRZS9kdzlhbEtUV0FQaHNIb0xka24rVEFOQmdrcWhraUc5dzBCQVFzRkFEQVMKTVJBd0RnWURWUVFLRXdkQlkyMWxJRU52TUI0WERURTJNRGt5TlRBd05EY3hOMW9YRFRFM01Ea3lOVEF3TkRjeApOMW93RWpFUU1BNEdBMVVFQ2hNSFFXTnRaU0JEYnpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDCkFRb0NnZ0VCQUw4V3doTEdiSzhIa2lFREtWMEpianRXcDMvRVdLaEtGVzNZdEt0UGZQT2dvWmVqZE5uOVZFMEIKSWxRNHJ3YTF3bXNNOU5ES0MwbTYwb2lOT1lleXVneDlQb0ZJM1JYenVLVlgyeDdFNUxUVzBzdjBMQzlQQ2dnWgpNWlRpaDFBaVl0d0pJWmwrYUs2czRkVGIvUFVPTERkY1JUWlRGMmVna2RBaWNiVWxRVDRLbitBM2pIaUUrQVRDCmgzTWxWMkJIYXJoQWhXYjBGck9nMmJFdEZyTXlGRGFMYkhJN3hiait2QjlDa0dCOUw1dE9iUDJNOWxRQ3hIOGQKRWxXa0pqeGc3dmRraEo1K3NXTmFZODB1dE5pcFVkVk84NDV0SUVSd1JYUlJ2aUZZcE9jdU5mbkpZQzlrd1JqdgpDUmFuaDNlcFdoRzBjRlFWVjVkNDVzSGY2dDVGK2pzQ0F3RUFBYU5MTUVrd0RnWURWUjBQQVFIL0JBUURBZ1dnCk1CTUdBMVVkSlFRTU1Bb0dDQ3NHQVFVRkJ3TUJNQXdHQTFVZEV3RUIvd1FDTUFBd0ZBWURWUjBSQkEwd0M0SUoKYkc5allXeG9iM04wTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFBZGQzWlc2UjRjSW1teEl6Zm96N1R0cTg2MgpvT2l5ekZuaXNDeGdOZEE3OGVwaXQ0OXpnMENnRjdxOWd1VEVBclhKTEkrL3FualBQT2JQT2xUbHNFeW9tYjJGClVPUysyaG4vWnlVNS90VXhoa2VPQllxZEVhcnlrNnpGNnZQTFVKNUlwaEpnT2cwMHVJUUdMMFV2dXBCTEV5SUcKUnNhL2xLRXRXNVo5UGJJaTlHZVZuNTFVKzlWTUNZZnQvVDdTRHppS2w3T2NFL3FvVmgxRzAvdFRSa0FxT3FwWgpiemM4c3NFaEpWTlovRE8rdVlITllmL3dhQjZOamZYUXVUZWdVL1N5eG5hd3ZRNG9CSEl6eXVXcGxHQ2NUbGZUCklYc09RZEpvMnh1dTg4MDdkK3JPMUZwTjh5V2k1T0YvMHNpZjBScm9jU3NrTEFJTC9QSTFxZld1dVBjawotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="),
"tls.key": Mustb64Decode("LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdnhiQ0VzWnNyd2VTSVFNcFhRbHVPMWFuZjhSWXFFb1ZiZGkwcTA5ODg2Q2hsNk4wCjJmMVVUUUVpVkRpdkJyWENhd3owME1vTFNiclNpSTA1aDdLNkRIMCtnVWpkRmZPNHBWZmJIc1RrdE5iU3kvUXMKTDA4S0NCa3hsT0tIVUNKaTNBa2htWDVvcnF6aDFOdjg5UTRzTjF4Rk5sTVhaNkNSMENKeHRTVkJQZ3FmNERlTQplSVQ0Qk1LSGN5VlhZRWRxdUVDRlp2UVdzNkRac1MwV3N6SVVOb3RzY2p2RnVQNjhIMEtRWUgwdm0wNXMvWXoyClZBTEVmeDBTVmFRbVBHRHU5MlNFbm42eFkxcGp6UzYwMktsUjFVN3pqbTBnUkhCRmRGRytJVmlrNXk0MStjbGcKTDJUQkdPOEpGcWVIZDZsYUViUndWQlZYbDNqbXdkL3Eza1g2T3dJREFRQUJBb0lCQVFDUjY5RWNBVVp4aW5oKwptU2wzRUlLSzhhdExHQ2NUckM4ZENRVStaSjdvZEZ1eHJuTEhISHJKcXZvS0VwY2xxcHJpb0t3NjNHOHVTR29KCk9MOGI3dEhBUTh2OWNpVFNaS0UyTWhiME1pcnNKYmduWXpoeWtBcjdFRElhbmJueTZhOVFrL0NDaEZOd1FEamMKRVhuanNJVDNhWkM0NFU3WUpYZnoxcm02T003UGpuNno4SDR2WUdSRE9zWWtoWHZQZm5QVzhDMkxGSlZyOW52RQowZ0lBT1ZvR2VqRUpyc0pWSzNVai9uUGNxU1FZWG13RW10anR6T3c3dTZ5cDFiMlZaRUs3dFI0N0h3SnQ2bHRHClo5emhwd2hwdmRPdVhOTXFNT1lSZjliTEJXblNxSWxUSE9PMFVsQW55UkNZMUh4bHVaQjdaU2c5Vm5vSkRyRDcKdytKcUFHbkJBb0dCQU81cXlJempsZHdSMDA0WWplcG1aZnVYM1BuR0xaaHpobVRUQzdQbDlncXYxVHZ4Znh2RAo2eUJGTDJHck4xSWNuclg5UWsyeG5jVUFicE05ODlNRitFQzdJNCsrMXQxSTZha1VLRkVEa2Z2UXdRakNYZlBTCkp2MnJrd0lWU2t0OEYwWC90T2IxM09lSWlIdUZWSS9CYjlWb0pTUC9rNERmUFYrL0hud0J4dnpMQW9HQkFNMHUKYi9yWWZtNXJiMjAvUEtDbFVzMTU0czBlS1Nva1ZvZ3FpSmtmKzVxTHNWK1RENTBKVlpCVnc4czRYTTc5aXdRSQpQeUdZOW5JMUF2cUc3eUl6eFN5NS9RazErWlZkVllwbVdJTzVQbko4VFZyYURWaENRM2ZWejF1V3RjeWFxUFZyCjNRemR5dnNFZ0ZVR0ZJdG1SZGhTdkE4UkdycFZDSFRCenJEajNqcFJBb0dCQUtOYVNMUzNqa3N0YjNEM3creVIKWWxpaXNZWDFjZklkWFR5aG1VZ1dUS0QvM29MbXNTZHQ4aUMzSm9LdDFBYVBrM0t2NW9qakpHMEJJY0lDMVplRgpaSlc5WXQwdmJYcEtaY1l5Q0htUmo2bFFXNkpMd2lHM29IMTMzQTYyVmFRb2pxMm9TT05pRzR3TDhTOW9xQXFqCkI2UFphbkVpd0lhdzdoVTNGb1R5bHN0SEFvR0FGWXZFMHBDZFpqYjk4bmpyZ3VzWmNONVZ4TGhnRmo3T24ybm8KQWp4cmpXVVI4VGxlTUYxa2tNMlF5K3hWUXA4NVUra1J5Qk5wL2NBM1dkdUZqUS9tcXJXMUxweHVZeEwwQXA2UQp1UFJnN0dERk5yOGpHNXVKdmpIRG5waUs2cnRxOXFxbkFjemduYzl4TW54Njk5QjdrU1hPL2I0TUVua1BkRU5OCjB5RjZtcUVDZ1lBODhVRUx4YmhxTVNkRzI0RFgwekhYdmtYTEltbDJKTlZiNTRnbEZCeUlJZW0rYWNmZjlvRzkKWDVHYWpsQnJvUG9LazdGZ0E5b3VxY1FNSDY2VW5GaTZxaDA3bDBKMnhiMGFYUDh5ekxBR2F1VkdUVE5JUUNSNApWcHF5RHBqbGMxWnFmWldPcnZ3U3JVSDFtRWt4YmVWdlFzT1VqYTJKdnUrbGMzWm8wOTlJTHc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="),

}

// CertsNotAfterTimes records the not-after-time of the certs in Certs.
var CertsNotAfterTimes = map[string]time.Time{
	"certPEM": timeMustParse(time.RFC3339, "2014-05-29T00:00:00Z"),
	"rootPEM": timeMustParse(time.RFC3339, "2015-04-04T15:15:55Z"),
	"tls.crt": timeMustParse(time.RFC3339, "2017-09-25T00:47:17Z"),
}

func B64Encode(in string) []byte {
	out := base64.StdEncoding.EncodeToString([]byte(in))
	return []byte(out)
}

func Mustb64Decode(in string) []byte {
	out, err := base64.StdEncoding.DecodeString(in)
	if err != nil {
		glog.Fatal(err)
	}
	return out
}

func timeMustParse(layout string, value string) time.Time {
	t, err := time.Parse(layout, value)
	if err != nil {
		panic(err)
	}
	return t
}